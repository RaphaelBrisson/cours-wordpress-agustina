$grid-size: 20px;
$break-small: 650px;
$content-width: 610px;
$default-font-size: 13px;

@mixin break-small() {
    @media (min-width: #{ ($break-small) }) {
        @content;
    }
}

.wp-block-gallery {

    .blocks-gallery-grid {
        margin: 0;

        .blocks-gallery-item {
            padding-left: 0;
            max-height: 80vh;

            &:before {
                display: none;
            }
        }
    }

    //Gutenberg Style
    .blocks-gallery-image,
    .blocks-gallery-item {
        margin: $grid-size $grid-size 0 0;
        display: flex;
        flex-grow: 1;
        flex-direction: column;
        justify-content: center;
        position: relative;
        padding-left: 0;
        list-style-type: none !important;

        &:before {
            display: none;
        }

        figure {
            margin: 0;
            height: 100%;

            // IE doesn't support flex so omit that.
            @supports (position: sticky) {
                display: flex;
                align-items: flex-end;
                justify-content: flex-start;
            }
        }

        img {
            display: block;
            max-width: 100%;
            height: auto;
        }

        // IE doesn't handle cropping, so we need an explicit width here.
        img {
            width: 100%;

            // IE11 doesn't read rules inside this query.
            // They are applied only to modern browsers.
            @supports (position: sticky) {
                width: auto;
            }
        }
    }

    // Cropped
    &.is-cropped .blocks-gallery-image,
    &.is-cropped .blocks-gallery-item {

        a,
        img {
            // The following rules are for all browsers.
            width: 100%;

            // IE11 doesn't read rules inside this query.
            // They are applied only to modern browsers.
            @supports (position: sticky) {
                height: 100%;
                flex: 1;
                object-fit: cover;
            }
        }
    }

    // On mobile and responsive viewports,
    // we allow only 1 or 2 columns at the most.
    .blocks-gallery-image,
    .blocks-gallery-item {
        width: calc((100% - #{ $grid-size }) / 2);

        &:nth-of-type(even) {
            margin-right: 0;
        }
    }

    &.columns-1 .blocks-gallery-image,
    &.columns-1 .blocks-gallery-item {
        width: 100%;
        margin-right: 0;
    }

    // Beyond mobile viewports, we allow up to 8 columns.
    @include break-small {
        @for $i from 2 through 8 {
            &.columns-#{ $i } .blocks-gallery-image,
            &.columns-#{ $i } .blocks-gallery-item {
                width: calc((100% - #{ $grid-size } * #{ $i - 1 }) / #{ $i });
                margin-right: $grid-size;

                // Rules inside this query are only run by Microsoft Edge.
                // Edge miscalculates `calc`, so we have to add some buffer.
                // See also https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/15637241/
                @supports (-ms-ime-align:auto) {
                    width: calc((100% - #{ $grid-size } * #{ $i - 1 }) / #{ $i } - 1px);
                }
            }
        }

        // Unset the right margin on every rightmost
        // gallery item to ensure center balance.
        @for $column-count from 1 through 8 {
            &.columns-#{ $column-count } .blocks-gallery-image:nth-of-type(#{ $column-count }n),
            &.columns-#{ $column-count } .blocks-gallery-item:nth-of-type(#{ $column-count }n) {
                margin-right: 0;
            }
        }
    }

    // Last item always needs margins reset.
    .blocks-gallery-image:last-child,
    .blocks-gallery-item:last-child {
        margin-right: 0;
    }

    .blocks-gallery-grid {
        margin-bottom: 0;
    }

    .block-editor-rich-text {
        height: 100%;
    }
}
